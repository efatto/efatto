# -*- coding: utf-8 -*-
from openerp import models, fields, api
from openerp.exceptions import ValidationError
try:
    from num2words import num2words
except ImportError:
    raise ValidationError('In order to proceed, please install python module called `num2words`.\n How to install the latest version in Linux/UNIX or Windows System:\n 1. Download it from https://github. com/savoirfairelinux/num2words \n 2. Unzip the downloaded file\n 3. Change directory to the unziped `num2words` folder  and run this command: "python setup.py install"\n')


class customized_so_order(models.Model):
	_inherit=["sale.order"]

	@api.model
	def _default_template(self):
	    if not self.env.user.company_id.template_so:
		def_tpl = self.env['ir.ui.view'].search([('name', 'like', 'SO Template' ), ('type', '=', 'qweb')], order='id asc', limit=1)
                self.env.user.company_id.write({'template_so': def_tpl.id})
	    return self.env.user.company_id.template_so or self.env.ref('sale.report_saleorder_document')
	

        project_title = fields.Char('Title', help="The title of Sales order or purpose of the Sale order Or Quote")
	
 	order_logo = fields.Binary("Logo", attachment=True,
             help="This field holds the image used as logo for the order, if non is uploaded, the default logo define in the company settings will be used")
	templ_id = fields.Many2one('ir.ui.view', 'Sale Order Report Template', default=_default_template,required=False, 
		domain="[('type', '=', 'qweb'), ('name', 'like', 'SO Template' )]")
        odd = fields.Char('Odd parity Color', size=7, required=True, default=lambda self: self.env.user.company_id.odd, help="The background color for Odd lines in the order")	
        even = fields.Char('Even parity Color', size=7, required=True, default=lambda self: self.env.user.company_id.even, help="The background color for Even lines in the order" )	
        theme_color = fields.Char('Theme Color', size=7, required=True, default=lambda self: self.env.user.company_id.theme_color, help="The Main Theme color of the sale order/quaotation. Normally this should be one of your official company colors")	
        theme_txt_color = fields.Char('Theme Text Color', size=7, required=True, default=lambda self: self.env.user.company_id.theme_txt_color, 
			help="The Text color of the areas with theme color. This should not be the same the theme color")	
        text_color = fields.Char('Text Color', size=7, required=True, default=lambda self: self.env.user.company_id.text_color, help="The Text color of the order. Normally this\
			 should be one of your official company colors or default HTML text color")	
        name_color = fields.Char('Company Name Color', size=7, required=True, default=lambda self: self.env.user.company_id.name_color, help="The Text color of the Company Name. \
			Normally thisshould be one of your official company colors or default HTML text color")	
        cust_color = fields.Char('Customer Name Color', size=7, required=True, default=lambda self: self.env.user.company_id.cust_color, help="The Text color of the Customer Name. \
			Normally this should be one of your official company colors or default HTML text color")	
        header_font = fields.Selection([(x,str(x)) for x in range(1,51)], string="Header Font-Size(px):", default=lambda self: self.env.user.company_id.header_font, required=True)
        body_font = fields.Selection([(x,str(x)) for x in range(1,51)], string="Body Font-Size(px):", default=lambda self: self.env.user.company_id.body_font, required=True)
        footer_font = fields.Selection([(x,str(x)) for x in range(1,51)], string="Footer Font-Size(px):", default=lambda self: self.env.user.company_id.footer_font, required=True)
        font_family = fields.Char('Font Family:', default=lambda self: self.env.user.company_id.font_family, required=True)
        amount_words= fields.Char('Amount in Words:', help="The total amount in words is automatically generated by the system..few languages are supported currently", compute='_compute_num2words')
        aiw_report = fields.Boolean('Show in report?', default=lambda self: self.env.user.company_id.aiw_report,  help="If you want to display the total in words in the report, then check this box")
        show_img = fields.Boolean('Display Product Image?', default=lambda self: self.env.user.company_id.show_img,  help="Check this box to display product image in the Sales Order/Quotation")

        @api.one
        def _compute_num2words(self):
            try:
                self.amount_words = (num2words(self.amount_total, lang=self.partner_id.lang) + ' ' + (self.currency_id.currency_name or '')).upper()
            except NotImplementedError:
                self.amount_words = (num2words(self.amount_total, lang='en') + ' ' + (self.currency_id.currency_name or '')).upper()


	##Override print_quotation method in sale module
	@api.multi
	def print_quotation(self):
            """ Method called when print button is clicked 
	       This Method overrides the one in the original sale module
            """
            self.filtered(lambda s: s.state == 'draft').write({'state': 'sent'})
            return self.env['report'].get_action(self, 'professional_templates.sale_order')

